from Blackbox import MalwareDetectionModels
from DataUploader import UploadData
from MasterGAN import MasterGAN
import pandas as pd
import ImageProcessing
import numpy as np
import os
import tensorflow.keras as keras
from tensorflow.keras import layers
import tensorflow as tf
import math
from os.path import join as pjoin

tf.keras.backend.clear_session()

# load the blackox detector
bb_detector = MalwareDetectionModels(None, None, 'M11',None, None,None,loaded=True)
#load the dataset
COLOR_MODE = 'grayscale'        
IMAGE_HEIGHT = 256
IMAGE_WIDTH = 512
BATCH_SIZE = 64
SEED = 1337
DIRECTORY = '/home/user/projects/dataset/test_images_wo_cm/Ben_img_no_colormap'
gan_set = keras.preprocessing.image_dataset_from_directory(
    DIRECTORY,
    label_mode = None,
    color_mode=COLOR_MODE,
    seed=SEED,
    interpolation="bilinear",
    batch_size=BATCH_SIZE,
    image_size=(IMAGE_HEIGHT, IMAGE_WIDTH),
    shuffle=True
)
bb_on_real = np.load('/home/user/projects/GAN_project/labels/BB_ON_REAL_RIGHT.npy',allow_pickle=True)

@tf.function
def ds(exe_batch):
    return tf.stack(exe_batch)

cluster_dir = '/home/user/projects/GAN_project/cluster_lists/clusters/'
column_subset = [ 'fname', 'size' ]   
root = '/home/user/projects/GAN_project/cluster_lists/'
mal_data_dir = '/home/user/projects/dataset/Malimg_exe_test/'
#os.mkdir('/home/user/projects/GAN_project/GAN_TRAINING_RESULTS/results/')
cl_n = 0
sample_list = []
loaded = False

if loaded :
    directory = '/home/user/projects/GAN_project/GAN_TRAINING_RESULTS/sample_list.csv'
    df_1 = pd.read_csv(directory, sep=r'\,', usecols=['sample','cluster'])
    for index, row in df_1.iterrows():
            sample_list.append([row['sample'],row['cluster']]) 
        
else:
    for cluster in os.listdir(cluster_dir):
        cl_n = cl_n + 1
        df = pd.read_csv(cluster_dir + cluster, sep=r'\|', usecols=column_subset)
        df= df.sample(n = 3)
        for index, row in df.iterrows():
            sample_list.append([row['fname'],cl_n]) 

    pd.DataFrame(sample_list).to_csv("/home/user/projects/GAN_project/GAN_TRAINING_RESULTS/sample_list.csv",mode='a')

percentages = [0.4,0.3,0.2]

for percentage in percentages:
    for sample in sample_list:  
        tf.keras.backend.clear_session()
        sample_name = sample[0]           
        sample_path= pjoin(mal_data_dir,sample_name)
        
        malware_sample = ImageProcessing.readBytes2(sample_path)
        height = math.ceil(malware_sample.shape[0]/512)
        exe_batch = []

        for i in range(0,64):
            exe_batch.append(malware_sample)
        try:
            malware_sample_1 = ds(exe_batch)
            malware_sample_1=tf.reshape(malware_sample_1, [64,height,512,1])
        except Exception as e: 
                final_log = '\n EXCEPTION \n'+str(e)
                print(final_log)
                with open('/home/user/projects/GAN_project/GAN_TRAINING_RESULTS/results/log.txt', "a") as myfile:
                    myfile.write(final_log) 

        ##### memorandum #########
        mal_test = ''
    
        print('\n SAMPLE '+sample_path[50:]+' with '+str(int(percentage*100))+'% noise \n')
        GAN = MasterGAN(True, bb_detector, height, percentage, sample_name[:-4]+'_cluster_'+str(sample[1]), 256, 256 )
        try:
            GAN.train(gan_set, malware_sample_1,mal_test, bb_on_real)
        except Exception as e: 
            final_log = '\n TRAINING EXCEPTION \n'+str(e)
            print(final_log)
            with open('/home/user/projects/GAN_project/GAN_TRAINING_RESULTS/results/log.txt', "a") as myfile:
                myfile.write(final_log) 
